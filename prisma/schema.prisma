// SchoolBridge Database Schema
// Offline-first school management platform for Madagascar

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====

enum UserRole {
  ADMIN
  EDUCATIONAL_MANAGER
  TEACHER
  STUDENT
  PARENT
}

enum CourseStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  LESSON
  TEXT
  VIDEO
  PDF
  INTERACTIVE
  QUIZ
  ASSIGNMENT
}

enum Language {
  FR
  EN
  MG
  ES
}

enum NotificationType {
  COURSE_ASSIGNED
  GRADE_POSTED
  PARENT_INSTRUCTION
  COURSE_VALIDATED
  COURSE_REJECTED
  ASSIGNMENT_DUE
  SYSTEM_ALERT
  MESSAGE_RECEIVED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum InstructionStatus {
  PENDING
  COMPLETED
  SKIPPED
  NEEDS_HELP
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  RESUBMISSION_REQUESTED
}

enum ValidationStatus {
  APPROVED
  CHANGES_REQUESTED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  TRUE_FALSE
  ESSAY
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuizAttemptStatus {
  IN_PROGRESS
  SUBMITTED
  GRADED
}

enum QuizMode {
  PRACTICE     // Student gets instant feedback on each question
  EXAM         // Student sees no feedback until submission, then final score and answers
  TIMED_EXAM   // Like EXAM but with strict time limit, auto-submits when time expires
}

// ===== USER MANAGEMENT =====

model User {
  id                  String    @id @default(uuid())
  email               String?   @unique
  phone               String?   @unique
  emailVerified       DateTime?
  phoneVerified       DateTime?
  password            String
  name                String
  role                UserRole
  languagePreference  Language  @default(FR)
  isActive            Boolean   @default(true)
  lastLogin           DateTime?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  schoolId            String?
  settings            Json?     @default("{}")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  school               School?                       @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  accounts             Account[]
  sessions             Session[]
  coursesCreated       Course[]                      @relation("CourseCreator")
  courseValidations    CourseValidation[]
  parentRelations      UserRelationship[]            @relation("ParentUser")
  studentRelations     UserRelationship[]            @relation("StudentUser")
  studentProgress      StudentProgress[]
  instructionsGiven    ParentInstruction[]           @relation("InstructionCreator")
  instructionsReceived ParentInstructionCompletion[]
  notifications        Notification[]
  auditLogs            AuditLog[]
  classes              Class[]                       @relation("ClassStudents")
  classSchedules       ClassSchedule[]               @relation("TeacherSchedules")
  submissions          Submission[]
  submissionsGraded    Submission[]                  @relation("SubmissionsGraded")
  attendances          Attendance[]
  attendancesRecorded  Attendance[]                  @relation("AttendancesRecorded")
  quizSubmissions      QuizSubmission[]

  @@index([email])
  @@index([phone])
  @@index([schoolId])
  @@index([role])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PendingRegistration {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  passwordHash String
  role         UserRole
  schoolId     String
  otpHash      String
  expires      DateTime
  createdAt    DateTime @default(now())

  @@index([email])
}

model UserRelationship {
  id         String   @id @default(uuid())
  parentId   String
  studentId  String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  parent  User @relation("ParentUser", fields: [parentId], references: [id], onDelete: Cascade)
  student User @relation("StudentUser", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
}

// ===== SCHOOL MANAGEMENT =====

model School {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  courses       Course[]
  config        SchoolConfig?
  academicYears AcademicYear[]
  subjects      Subject[]
  classes       Class[]

  @@index([code])
}

model SchoolConfig {
  id                       String  @id @default(uuid())
  schoolId                 String  @unique
  allowVideoDownload       Boolean @default(true)
  allowPdfDownload         Boolean @default(true)
  allowInteractiveDownload Boolean @default(true)
  syncFrequencyHours       Int     @default(24)
  maxDownloadSizeMB        Int     @default(100)

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

// ===== ACADEMICS =====

model AcademicYear {
  id        String   @id @default(uuid())
  name      String // e.g., "2025-2026"
  startDate DateTime
  endDate   DateTime
  schoolId  String
  isActive  Boolean  @default(false)

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school  School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  courses Course[]

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Class {
  id        String   @id @default(uuid())
  name      String // e.g., "Grade 5 - Section A"
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school       School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students     User[]             @relation("ClassStudents")
  assignments  CourseAssignment[]
  attendances  Attendance[]
  schedules    ClassSchedule[]
  quizAssignments QuizAssignment[] @relation("QuizAssignments")

  @@unique([schoolId, name])
  @@index([schoolId])
}

model ClassSchedule {
  id                  String   @id @default(uuid())
  classId             String
  teacherId           String
  dayOfWeek           DayOfWeek
  plannedStartTime    String   // Time format "HH:MM" e.g., "09:00"
  plannedDuration     Int      // Duration in minutes e.g., 60
  actualStartTime     String?  // Time format "HH:MM" e.g., "09:05" (when class actually starts)
  actualDuration      Int?     // Actual duration in minutes (null if not yet conducted)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  class               Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher             User     @relation("TeacherSchedules", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([classId, dayOfWeek])
  @@index([classId])
  @@index([teacherId])
  @@index([dayOfWeek])
}

// ===== COURSE MANAGEMENT =====

model Course {
  id             String       @id @default(uuid())
  title          String
  description    String?
  teacherId      String
  schoolId       String
  subjectId      String
  status         CourseStatus @default(DRAFT)
  language       Language     @default(FR)
  requiresOnline Boolean      @default(false)
  fileSizeBytes  Int?
  thumbnailUrl   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  publishedAt    DateTime?

  // Relations
  teacher     User               @relation("CourseCreator", fields: [teacherId], references: [id], onDelete: Restrict)
  school      School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject     Subject            @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  content     CourseContent[]
  validations CourseValidation[]
  versions    ContentVersion[]
  assignments CourseAssignment[]
  progress    StudentProgress[]

  @@index([teacherId])
  @@index([schoolId])
  @@index([status])
  @@index([language])
  @@index([subjectId])
}

model CourseContent {
  id                     String      @id @default(uuid())
  courseId               String
  contentOrder           Int
  contentType            ContentType
  title                  String
  contentData            Json
  appearsAfterSeconds    Int?
  disappearsAfterSeconds Int?
  fileReference          String?
  offlineAvailable       Boolean     @default(false)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
  quiz        Quiz?        // One-to-one relation when contentType = QUIZ

  @@index([courseId, contentOrder])
}

model CourseValidation {
  id           String           @id @default(uuid())
  courseId     String
  reviewerId   String
  feedbackText String?
  status       ValidationStatus
  suggestions  Json?
  reviewedAt   DateTime         @default(now())

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  reviewer User   @relation(fields: [reviewerId], references: [id], onDelete: Restrict)

  @@index([courseId])
  @@index([reviewerId])
}

model ContentVersion {
  id        String   @id @default(uuid())
  courseId  String
  version   Int
  content   Json
  changes   String?
  createdBy String
  createdAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, version])
  @@index([courseId])
}

model CourseAssignment {
  id         String    @id @default(uuid())
  courseId   String
  studentId  String?
  classId    String?
  assignedAt DateTime  @default(now())
  dueDate    DateTime?

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  class  Class? @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([studentId])
  @@index([classId])
}

// ===== QUIZ SYSTEM =====

model Quiz {
  id              String     @id @default(uuid())
  courseContentId String     @unique // Link to CourseContent when contentType = QUIZ
  title           String
  description     String?
  passingScore    Float      @default(70) // Percentage required to pass
  timeLimit       Int?       // Minutes allowed to complete quiz (null = unlimited)
  mode            QuizMode   @default(PRACTICE) // PRACTICE: instant feedback, EXAM: no feedback until end, TIMED_EXAM: exam with strict time limit
  showAnswersAfter Boolean    @default(true) // Show correct answers after submission (auto-set based on mode)
  randomizeQuestions Boolean  @default(false) // Randomize question order for each student
  status          QuizStatus @default(DRAFT)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  questions       Question[]
  assignments     QuizAssignment[]
  submissions     QuizSubmission[]
  courseContent   CourseContent @relation(fields: [courseContentId], references: [id], onDelete: Cascade)

  @@index([status])
}

model Question {
  id           String       @id @default(uuid())
  quizId       String
  questionType QuestionType
  text         String       // Question text
  explanation  String?      // Optional explanation shown after answer
  order        Int          // Question order in quiz
  points       Float        @default(1) // Points for correct answer
  options      Json         // For MULTIPLE_CHOICE: [{ id, text }, ...], For TRUE_FALSE: [{ id: "true", text: "True" }, { id: "false", text: "False" }]
  correctAnswer Json        // Correct answer(s): { type: "single"|"multiple", value: string|string[] }
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  responses QuestionResponse[]

  @@index([quizId, order])
}

model QuestionResponse {
  id         String   @id @default(uuid())
  questionId String
  submissionId String
  studentAnswer Json   // Student's answer to this question
  isCorrect  Boolean? // null if not yet graded (for essay/short answer)
  pointsEarned Float  @default(0)
  createdAt  DateTime @default(now())

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([questionId, submissionId])
  @@unique([questionId, submissionId])
}

model QuizSubmission {
  id          String             @id @default(uuid())
  quizId      String
  studentId   String
  attemptNumber Int              @default(1) // Track multiple attempts
  startedAt   DateTime           @default(now())
  submittedAt DateTime?          // null if still in progress
  score       Float?             // Percentage score
  totalPoints Float?             // Total possible points for reference
  timeSpent   Int?               // Seconds spent on quiz
  status      QuizAttemptStatus  @default(IN_PROGRESS)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  quiz      Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student   User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  responses QuestionResponse[]

  @@index([quizId])
  @@index([studentId])
  @@index([status])
  @@unique([quizId, studentId, attemptNumber])
}

model QuizAssignment {
  id          String   @id @default(uuid())
  quizId      String
  classId     String?
  studentId   String?
  assignedAt  DateTime @default(now())
  dueDate     DateTime?
  scheduledDate DateTime? // When the quiz is scheduled to be taken
  createdAt   DateTime @default(now())

  quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  class   Class? @relation("QuizAssignments", fields: [classId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([classId])
  @@index([studentId])
}

// ===== PROGRESS TRACKING & ASSESSMENT =====

model StudentProgress {
  id                   String   @id @default(uuid())
  studentId            String
  courseId             String
  completionPercentage Float    @default(0)
  timeSpentMinutes     Int      @default(0)
  lastAccessed         DateTime @default(now())
  currentModule        String?
  updatedAt            DateTime @updatedAt

  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Submission {
  id              String           @id @default(uuid())
  studentId       String
  courseContentId String
  submittedAt     DateTime         @default(now())
  content         Json? // The student's answers
  grade           Float?
  gradedById      String?
  gradedAt        DateTime?
  feedback        String?
  status          SubmissionStatus @default(PENDING)

  student       User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseContent CourseContent @relation(fields: [courseContentId], references: [id], onDelete: Cascade)
  gradedBy      User?         @relation("SubmissionsGraded", fields: [gradedById], references: [id], onDelete: SetNull)

  @@unique([studentId, courseContentId])
  @@index([studentId])
  @@index([courseContentId])
  @@index([gradedById])
}

// ===== OPERATIONS & COMMUNICATION =====

model Attendance {
  id           String           @id @default(uuid())
  studentId    String
  classId      String
  date         DateTime         @db.Date
  status       AttendanceStatus @default(ABSENT)
  notes        String?
  recordedById String

  student    User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class      Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  recordedBy User  @relation("AttendancesRecorded", fields: [recordedById], references: [id], onDelete: Restrict)

  @@unique([studentId, classId, date])
  @@index([studentId])
  @@index([classId])
  @@index([recordedById])
}

model ParentInstruction {
  id              String    @id @default(uuid())
  teacherId       String
  studentId       String
  instructionText String
  isUrgent        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  expiresAt       DateTime?

  teacher     User                          @relation("InstructionCreator", fields: [teacherId], references: [id], onDelete: Cascade)
  completions ParentInstructionCompletion[]

  @@index([teacherId])
  @@index([studentId])
  @@index([createdAt])
}

model ParentInstructionCompletion {
  id            String            @id @default(uuid())
  instructionId String
  parentId      String
  completedAt   DateTime          @default(now())
  status        InstructionStatus @default(COMPLETED)
  notes         String?

  instruction ParentInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)
  parent      User              @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([instructionId, parentId])
  @@index([instructionId])
  @@index([parentId])
}

// ===== SYSTEM =====

model Notification {
  id        String               @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean              @default(false)
  readAt    DateTime?
  actionUrl String?
  priority  NotificationPriority @default(NORMAL)
  createdAt DateTime             @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@index([type])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([action, createdAt])
}
